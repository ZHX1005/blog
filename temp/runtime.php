<?php
class APP{ static$module; static$control; static$action; static function run(){ spl_autoload_register(array(__CLASS__,"autoload")); set_error_handler(array(__CLASS__,"error")); set_exception_handler(array(__CLASS__,"exception")); define("MAGIC_QUOTES_GPC", get_magic_quotes_gpc()?true:false); if(function_exists("date_default_timezone_set")){ date_default_timezone_set(C("DATE_TIMEZONE_SET"));} self::config(); if(C("DEBUG")){ debug::start("app_start");} self::init(); if(C("DEBUG")){ debug::show("app_start","app_end");} log::save();} static function init(){ url::parseUrl();$control_file=MODULE_PATH.'/'.MODULE.'/'.CONTROL.C("CONTROL_FIX").C("CLASS_FIX").'.php';$control=A(CONTROL);$action=ACTION; if(!method_exists($control,$action)){ error("控制器".CONTROL."中的动作".$action."不存在");}$control->$action();} static function config(){$config_file= CONFIG_PATH.'/config.php'; if(is_file($config_file)){ C(require$config_file);}} static function autoload($classname){ if(strpos($classname, C("CONTROL_FIX"))>0){ error("错误：控制器必须由A()函数创建，或者类没有创建");}$classfile= PHP_PATH.'/libs/bin/'.$classname.'.class.php'; loadfile($classfile);} static function error($errno,$errstr,$errfile,$errline){ switch($errno){ case E_ERROR; case E_USER_ERROR;$errmsg="ERROR:[$errno]<strong>$errstr</strong>File:$errfile"."[$errline]"; log::write("[$errno]<strong>$errstr</strong>File:$errfile($errline)"); error($errmsg); break; case E_NOTICE; case E_USER_NOTICE; case E_USER_WARNING; default:$errmsg="NOTICE:[$errno]<strong>$errstr</strong>File:$errfile"."[$errline]"; log::set("[$errno]<strong>$errstr</strong>File:$errfile($errline)"); notice(func_get_args()); break;}} static function exception($e){ error($e->show());}}
class APP{ static$module; static$control; static$action; static function run(){ spl_autoload_register(array(__CLASS__,"autoload")); set_error_handler(array(__CLASS__,"error")); set_exception_handler(array(__CLASS__,"exception")); define("MAGIC_QUOTES_GPC", get_magic_quotes_gpc()?true:false); if(function_exists("date_default_timezone_set")){ date_default_timezone_set(C("DATE_TIMEZONE_SET"));} self::config(); if(C("DEBUG")){ debug::start("app_start");} self::init(); if(C("DEBUG")){ debug::show("app_start","app_end");} log::save();} static function init(){ url::parseUrl();$control_file=MODULE_PATH.'/'.MODULE.'/'.CONTROL.C("CONTROL_FIX").C("CLASS_FIX").'.php';$control=A(CONTROL);$action=ACTION; if(!method_exists($control,$action)){ error("控制器".CONTROL."中的动作".$action."不存在");}$control->$action();} static function config(){$config_file= CONFIG_PATH.'/config.php'; if(is_file($config_file)){ C(require$config_file);}} static function autoload($classname){ if(strpos($classname, C("CONTROL_FIX"))>0){ error("错误：控制器必须由A()函数创建，或者类没有创建");}$classfile= PHP_PATH.'/libs/bin/'.$classname.'.class.php'; loadfile($classfile);} static function error($errno,$errstr,$errfile,$errline){ switch($errno){ case E_ERROR; case E_USER_ERROR;$errmsg="ERROR:[$errno]<strong>$errstr</strong>File:$errfile"."[$errline]"; log::write("[$errno]<strong>$errstr</strong>File:$errfile($errline)"); error($errmsg); break; case E_NOTICE; case E_USER_NOTICE; case E_USER_WARNING; default:$errmsg="NOTICE:[$errno]<strong>$errstr</strong>File:$errfile"."[$errline]"; log::set("[$errno]<strong>$errstr</strong>File:$errfile($errline)"); notice(func_get_args()); break;}} static function exception($e){ error($e->show());}}
class APP{ static$module; static$control; static$action; static function run(){ spl_autoload_register(array(__CLASS__,"autoload")); set_error_handler(array(__CLASS__,"error")); set_exception_handler(array(__CLASS__,"exception")); define("MAGIC_QUOTES_GPC", get_magic_quotes_gpc()?true:false); if(function_exists("date_default_timezone_set")){ date_default_timezone_set(C("DATE_TIMEZONE_SET"));} self::config(); if(C("DEBUG")){ debug::start("app_start");} self::init(); if(C("DEBUG")){ debug::show("app_start","app_end");} log::save();} static function init(){ url::parseUrl();$control_file=MODULE_PATH.'/'.MODULE.'/'.CONTROL.C("CONTROL_FIX").C("CLASS_FIX").'.php';$control=A(CONTROL);$action=ACTION; if(!method_exists($control,$action)){ error("控制器".CONTROL."中的动作".$action."不存在");}$control->$action();} static function config(){$config_file= CONFIG_PATH.'/config.php'; if(is_file($config_file)){ C(require$config_file);}} static function autoload($classname){ if(strpos($classname, C("CONTROL_FIX"))>0){ error("错误：控制器必须由A()函数创建，或者类没有创建");}$classfile= PHP_PATH.'/libs/bin/'.$classname.'.class.php'; loadfile($classfile);} static function error($errno,$errstr,$errfile,$errline){ switch($errno){ case E_ERROR; case E_USER_ERROR;$errmsg="ERROR:[$errno]<strong>$errstr</strong>File:$errfile"."[$errline]"; log::write("[$errno]<strong>$errstr</strong>File:$errfile($errline)"); error($errmsg); break; case E_NOTICE; case E_USER_NOTICE; case E_USER_WARNING; default:$errmsg="NOTICE:[$errno]<strong>$errstr</strong>File:$errfile"."[$errline]"; log::set("[$errno]<strong>$errstr</strong>File:$errfile($errline)"); notice(func_get_args()); break;}} static function exception($e){ error($e->show());}}C(require PHP_PATH.'/libs/etc/init.config.php');?>